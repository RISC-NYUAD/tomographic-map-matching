diff --git a/modules/calib3d/include/opencv2/calib3d.hpp b/modules/calib3d/include/opencv2/calib3d.hpp
index 198e405f6d..f3047b5486 100644
--- a/modules/calib3d/include/opencv2/calib3d.hpp
+++ b/modules/calib3d/include/opencv2/calib3d.hpp
@@ -3467,6 +3467,12 @@ by the (typically unknown) depth of the scene, i.e. its direction but with norma
 If point correspondences are available, at least two solutions may further be invalidated, by
 applying positive depth constraint, i.e. all points must be in front of the camera.
  */
+CV_EXPORTS_W cv::Mat estimateRigid2D(InputArray from, InputArray to, OutputArray inliers = noArray(),
+                                     int method = RANSAC, double ransacReprojThreshold = 3,
+                                     size_t maxIters = 2000, double confidence = 0.99,
+                                     size_t refineIters = 10);
+
+
 CV_EXPORTS_W int decomposeHomographyMat(InputArray H,
                                         InputArray K,
                                         OutputArrayOfArrays rotations,
diff --git a/modules/calib3d/src/ptsetreg.cpp b/modules/calib3d/src/ptsetreg.cpp
index 5c91fff037..8335f34820 100644
--- a/modules/calib3d/src/ptsetreg.cpp
+++ b/modules/calib3d/src/ptsetreg.cpp
@@ -1182,4 +1182,202 @@ Mat estimateAffinePartial2D(InputArray _from, InputArray _to, OutputArray _inlie
     return H;
 }
 
+class Rigid2DEstimatorCallback : public Affine2DEstimatorCallback
+{
+public:
+    int runKernel( InputArray _m1, InputArray _m2, OutputArray _model ) const CV_OVERRIDE
+    {
+        Mat m1 = _m1.getMat(), m2 = _m2.getMat();
+        const Point2f* from = m1.ptr<Point2f>();
+        const Point2f* to   = m2.ptr<Point2f>();
+        _model.create(2, 3, CV_64F);
+        Mat M_mat = _model.getMat();
+        double *M = M_mat.ptr<double>();
+
+        // we need only 2 points to estimate transform
+        double x1 = from[0].x;
+        double y1 = from[0].y;
+        double x2 = from[1].x;
+        double y2 = from[1].y;
+
+        double X1 = to[0].x;
+        double Y1 = to[0].y;
+        double X2 = to[1].x;
+        double Y2 = to[1].y;
+
+        /*
+        we are solving AS = B
+            | x1 -y1 1 0 |
+            | y1  x1 0 1 |
+        A = | x2 -y2 1 0 |
+            | y2  x2 0 1 |
+        B = (X1, Y1, X2, Y2).t()
+        we solve that analytically
+        */
+        double d = 1./((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
+
+        // solution vector
+        double S0 = d * ( (X1-X2)*(x1-x2) + (Y1-Y2)*(y1-y2) );
+        double S1 = d * ( (Y1-Y2)*(x1-x2) - (X1-X2)*(y1-y2) );
+        double S2 = d * ( (Y1-Y2)*(x1*y2 - x2*y1) - (X1*y2 - X2*y1)*(y1-y2) - (X1*x2 - X2*x1)*(x1-x2) );
+        double S3 = d * (-(X1-X2)*(x1*y2 - x2*y1) - (Y1*x2 - Y2*x1)*(x1-x2) - (Y1*y2 - Y2*y1)*(y1-y2) );
+
+        // remove scale parameter from S0 and S1
+        double theta = std::atan2(S1, S0);
+
+        // set model, rotation part is antisymmetric
+        M[0] = M[4] = std::cos(theta);
+        M[1] = -std::sin(theta);
+        M[2] = S2;
+        M[3] = std::sin(theta);
+        M[5] = S3;
+        return 1;
+    }
+};
+
+class Rigid2DRefineCallback : public LMSolver::Callback
+{
+public:
+    Rigid2DRefineCallback(InputArray _src, InputArray _dst)
+    {
+        src = _src.getMat();
+        dst = _dst.getMat();
+    }
+
+    bool compute(InputArray _param, OutputArray _err, OutputArray _Jac) const CV_OVERRIDE
+    {
+        int i, count = src.checkVector(2);
+        Mat param = _param.getMat();
+        _err.create(count*2, 1, CV_64F);
+        Mat err = _err.getMat(), J;
+        if( _Jac.needed())
+        {
+            _Jac.create(count*2, param.rows, CV_64F);
+            J = _Jac.getMat();
+            CV_Assert( J.isContinuous() && J.cols == 3 );
+        }
+
+        const Point2f* M = src.ptr<Point2f>();
+        const Point2f* m = dst.ptr<Point2f>();
+        const double* h = param.ptr<double>();
+        double* errptr = err.ptr<double>();
+        double* Jptr = J.data ? J.ptr<double>() : 0;
+
+        for( i = 0; i < count; i++ )
+        {
+            double Mx = M[i].x, My = M[i].y;
+            double xi = std::cos(h[0])*Mx - std::sin(h[0])*My + h[1];
+            double yi = std::sin(h[0])*Mx + std::cos(h[0])*My + h[2];
+            errptr[i*2] = xi - m[i].x;
+            errptr[i*2+1] = yi - m[i].y;
+
+            /*
+            Jacobian should be:
+                {-x.sin(t) -y.cos(t), 1, 0}
+                {x.cos(t) - y.sin(t), 0, 1}
+            */
+            if( Jptr )
+            {
+              Jptr[0] = -Mx*std::sin(h[0]) -My * std::cos(h[0]);
+              Jptr[1] = 1.; Jptr[2] = 0.;
+              Jptr[3] = Mx*std::cos(h[0]) - My*std::sin(h[0]);
+              Jptr[4] = 0.; Jptr[5] = 1.;
+              Jptr += 3*2;
+            }
+        }
+
+        return true;
+    }
+
+    Mat src, dst;
+};
+
+Mat estimateRigid2D(InputArray _from, InputArray _to, OutputArray _inliers,
+                    const int method, const double ransacReprojThreshold,
+                    const size_t maxIters, const double confidence,
+                    const size_t refineIters)
+{
+    Mat from = _from.getMat(), to = _to.getMat();
+    const int count = from.checkVector(2);
+    bool result = false;
+    Mat H;
+
+    CV_Assert( count >= 0 && to.checkVector(2) == count );
+
+    if (from.type() != CV_32FC2 || to.type() != CV_32FC2)
+    {
+        Mat tmp1, tmp2;
+        from.convertTo(tmp1, CV_32FC2);
+        from = tmp1;
+        to.convertTo(tmp2, CV_32FC2);
+        to = tmp2;
+    }
+    else
+    {
+        // avoid changing of inputs in compressElems() call
+        from = from.clone();
+        to = to.clone();
+    }
+
+    // convert to N x 1 vectors
+    from = from.reshape(2, count);
+    to = to.reshape(2, count);
+
+    Mat inliers;
+    if(_inliers.needed())
+    {
+        _inliers.create(count, 1, CV_8U, -1, true);
+        inliers = _inliers.getMat();
+    }
+
+    // run robust estimation
+    Ptr<PointSetRegistrator::Callback> cb = makePtr<Rigid2DEstimatorCallback>();
+    if( method == RANSAC )
+        result = createRANSACPointSetRegistrator(cb, 2, ransacReprojThreshold, confidence, static_cast<int>(maxIters))->run(from, to, H, inliers);
+    else if( method == LMEDS )
+        result = createLMeDSPointSetRegistrator(cb, 2, confidence, static_cast<int>(maxIters))->run(from, to, H, inliers);
+    else
+        CV_Error(Error::StsBadArg, "Unknown or unsupported robust estimation method");
+
+    if(result && count > 2 && refineIters)
+    {
+        // reorder to start with inliers
+        compressElems(from.ptr<Point2f>(), inliers.ptr<uchar>(), 1, count);
+        int inliers_count = compressElems(to.ptr<Point2f>(), inliers.ptr<uchar>(), 1, count);
+        if(inliers_count > 0)
+        {
+            Mat src = from.rowRange(0, inliers_count);
+            Mat dst = to.rowRange(0, inliers_count);
+            // H is
+            //     cos(theta) -sin(theta) tx
+            //     sin(theta)  cos(theta) ty
+            // Hvec model for LevMarq is
+            //     (theta, tx, ty)
+            double *Hptr = H.ptr<double>();
+            double angle = std::atan2(Hptr[3], Hptr[0]);
+            double Hvec_buf[3] = {angle, Hptr[2], Hptr[5]};
+            Mat Hvec (3, 1, CV_64F, Hvec_buf);
+            LMSolver::create(makePtr<Rigid2DRefineCallback>(src, dst), static_cast<int>(refineIters))->run(Hvec);
+            // update H with refined parameters
+            Hptr[0] = Hptr[4] = std::cos(Hvec_buf[0]);
+            Hptr[1] = -std::sin(Hvec_buf[0]);
+            Hptr[2] = Hvec_buf[1];
+            Hptr[3] = std::sin(Hvec_buf[0]);
+            Hptr[5] = Hvec_buf[2];
+        }
+    }
+
+    if (!result)
+    {
+        H.release();
+        if(_inliers.needed())
+        {
+            inliers = Mat::zeros(count, 1, CV_8U);
+            inliers.copyTo(_inliers);
+        }
+    }
+
+    return H;
+}
+
 } // namespace cv
